#line 2 1
uniform sampler2D sDepthTxt;

uniform mat4 uInvPVMatrix;

/*flat */varying vec4 uPlane0;
/*flat */varying vec4 vPlane0;
/*flat */varying vec4 uPlane1;
/*flat */varying vec4 vPlane1;

/*flat */varying vec4 planes[6];
///*flat */varying vec4 plane1;

uniform vec2 uScreenSize;

vec3 linePlane(vec3 a,vec3 b,vec4 plane)
{
	// dot(vec4(P,-1),plane) = 0
	// P = a + t * (b-a)
	// found plane . (a+t*(b-a),-1) = 0
	// plane . (a,-1) + plane . (t*(b-a),0) = 0
	// plane . (a,-1) + t * plane . ((b-a),0) = 0
	// t = - plane . (a,-1) / plane . (b-a,0) 
	vec3 dir = b-a;
	float t = -dot(plane,vec4(a,-1.0)) / dot(plane,vec4(dir,0.0));
	return mix(a,b,t);
}

void lineConvexHull(vec3 a,vec3 b,vec4 plane, inout float t0,inout float t1)
{
	vec3 dir = b-a;
	float t = -dot(plane,vec4(a,-1.0)) / dot(plane,vec4(dir,0.0));
	if(dot(dir,plane.xyz)<0.0)
	{
		if(t0<t) t0 = t;
	} else
	{
		if(t1>t) t1 = t;
	}
}

vec2 GetUV(vec3 p,out float t)
{
	t = -dot(planes[0],vec4(p,-1));
	vec4 planeU = mix(uPlane0,uPlane1,t);
	vec4 planeV = mix(vPlane0,vPlane1,t);
	return vec2(dot(planeU,vec4(p,1)),dot(planeV,vec4(p,1)));
}

float GetCollision(float v0,float v1,float u0,float u1)
{
	// v0 + (v1-v0)t = u0 + (u1-u0)t
	// (v1-v0-u1+u0)*t = u0-v0
	return (u0-v0)/(v1-v0-u1+u0);
}
#define EPS 1e-3
#define N_STEP 16.0
#define STEP (1.0/N_STEP)
bool parallax(out vec3 finalPos,out vec2 finalUV,out float finalT) 
{
	vec2 screenPos = (gl_FragCoord.xy/uScreenSize)*2.0-vec2(1.0);
	vec4 posA = uInvPVMatrix * vec4( screenPos,-1,1 ); 
	vec4 posB = uInvPVMatrix * vec4( screenPos,1,1 ); 
	posA/=posA.w;
	posB/=posB.w;
	float h0=0.0,h1=1.0;
	for(int i=0;i<6;i++)
	{
		//float exH0 = h0;
		lineConvexHull(posA.xyz,posB.xyz,planes[i],h0,h1);
		/*if(exH0!=h0)
		{
			if(i==0) gl_FragColor = vec4(0,0,0,1);
			if(i==1) gl_FragColor = vec4(1,0,0,1);
			if(i==2) gl_FragColor = vec4(0,1,0,1);
			if(i==3) gl_FragColor = vec4(0,0,1,1);
			if(i==4) gl_FragColor = vec4(1,1,0,1);
			if(i==5) gl_FragColor = vec4(0,1,1,1);
		}*/
	}
	vec3 pos0 = mix(posA.xyz,posB.xyz,h0);
	vec3 pos1 = mix(posA.xyz,posB.xyz,h1);
	vec2 txt0 = GetUV(pos0, h0); // h0 changes!
	vec2 txt1 = GetUV(pos1, h1); // h1 changes!
	//gl_FragColor  = vec4(h0,h0,h0,1);
	float t,nt;
	float hrt, hrn; 
	float htt, htn; 
	vec2 uvt,uvn;
	t=nt=0.0;
	uvt=uvn=txt0;
	hrt=hrn=h0;
	htt=htn=texture2D(sDepthTxt,txt0.xy).x; 	
	for(int i=0;i<int(N_STEP);i++)
	{
		t=nt;
		uvt = uvn;
		hrt = hrn;
		htt = htn;
		
		nt = t+STEP;
		uvn = mix(txt0,txt1,nt);
		hrn = mix(h0,h1,nt);
		htn = texture2D(sDepthTxt,uvn.xy).x; 
		
		float r = GetCollision(hrt,hrn,htt,htn);
		if( r>=0.0-EPS && r<=1.0+EPS)
		{
			finalUV = mix(uvt,uvn,r);
			finalT=mix(htt,htn,r);
			finalPos = mix(pos0,pos1,t+r*STEP);
			return true;
		}
	}
	return false;
}

vec3 CalcNormal(float t,vec2 uv)
{
#define DTXT 1e-3
	vec3 planeU = mix(uPlane0.xyz,uPlane1.xyz,t);
	vec3 planeV = mix(vPlane0.xyz,vPlane1.xyz,t);
	vec3 planeZ = planes[0].xyz;
	planeU /= dot(planeU,planeU);
	planeV /= dot(planeV,planeV);
	planeZ /= -dot(planeZ,planeZ);
	vec3 dirU = (texture2D(sDepthTxt,uv.xy+vec2(DTXT,0)).x-texture2D(sDepthTxt,uv.xy-vec2(DTXT,0)).x)*planeZ.xyz +
				(2.0*DTXT)*planeU.xyz;
	vec3 dirV = (texture2D(sDepthTxt,uv.xy+vec2(0,DTXT)).x-texture2D(sDepthTxt,uv.xy-vec2(0,DTXT)).x)*planeZ.xyz +
				(2.0*DTXT)*planeV.xyz;
	return normalize(cross(dirU,dirV));
}
